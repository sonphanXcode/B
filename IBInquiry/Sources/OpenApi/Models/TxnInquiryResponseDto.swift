//
// TxnInquiryResponseDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import IBCommon
import IBFoundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** List data */
public struct TxnInquiryResponseDto: Codable, Responseable, JSONEncodable, Hashable {

    public var id: String?
    public var orgId: String?
    public var txnType: String?
    public var status: String?
    public var createdDate: String?
    public var createdBy: String?
    public var approvedBy: String?
    public var inquiryReason: String?
    public var amount: Int64?
    public var ccy: String?

    public init(id: String? = nil, orgId: String? = nil, txnType: String? = nil, status: String? = nil, createdDate: String? = nil, createdBy: String? = nil, approvedBy: String? = nil, inquiryReason: String? = nil, amount: Int64? = nil, ccy: String? = nil) {
        self.id = id
        self.orgId = orgId
        self.txnType = txnType
        self.status = status
        self.createdDate = createdDate
        self.createdBy = createdBy
        self.approvedBy = approvedBy
        self.inquiryReason = inquiryReason
        self.amount = amount
        self.ccy = ccy
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case orgId
        case txnType
        case status
        case createdDate
        case createdBy
        case approvedBy
        case inquiryReason
        case amount
        case ccy
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        id = container.decodeIfPresent(.id)
        orgId = container.decodeIfPresent(.orgId)
        txnType = container.decodeIfPresent(.txnType)
        status = container.decodeIfPresent(.status)
        createdDate = container.decodeIfPresent(.createdDate)
        createdBy = container.decodeIfPresent(.createdBy)
        approvedBy = container.decodeIfPresent(.approvedBy)
        inquiryReason = container.decodeIfPresent(.inquiryReason)
        amount = container.decodeIfPresent(.amount)
        ccy = container.decodeIfPresent(.ccy)
       
    }
    
}

extension TxnInquiryResponseDto: Emptyable {
    public static var empty: TxnInquiryResponseDto {
        return .init(id: nil, orgId: nil, txnType: nil, status: nil, createdDate: nil, createdBy: nil, approvedBy: nil, inquiryReason: nil, amount: nil, ccy: nil)
    }
}
