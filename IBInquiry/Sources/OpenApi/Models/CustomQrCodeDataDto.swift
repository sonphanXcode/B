//
// CustomQrCodeDataDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import IBCommon
import IBFoundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CustomQrCodeDataDto: Codable, Responseable, JSONEncodable, Hashable {

    public enum QrType: String, Codable, CaseIterable {
        case bidvibankTransOtp = "BIDVIBANK_TRANS_OTP"
        case napas = "NAPAS"
    }
    public var authId: String?
    public var userId: String?
    public var qrType: QrType?
    public var additionalInfo: String?
    public var productName: String?
    public var subProductName: String?
    public var productCode: String?
    public var subProductCode: String?
    public var amount: String?
    public var trans: [QrTransGroupDto]?
    public var createdBy: String?
    public var totalTrans: Int64?

    public init(authId: String? = nil, userId: String? = nil, qrType: QrType? = nil, additionalInfo: String? = nil, productName: String? = nil, subProductName: String? = nil, productCode: String? = nil, subProductCode: String? = nil, amount: String? = nil, trans: [QrTransGroupDto]? = nil, createdBy: String? = nil, totalTrans: Int64? = nil) {
        self.authId = authId
        self.userId = userId
        self.qrType = qrType
        self.additionalInfo = additionalInfo
        self.productName = productName
        self.subProductName = subProductName
        self.productCode = productCode
        self.subProductCode = subProductCode
        self.amount = amount
        self.trans = trans
        self.createdBy = createdBy
        self.totalTrans = totalTrans
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case authId
        case userId
        case qrType
        case additionalInfo
        case productName
        case subProductName
        case productCode
        case subProductCode
        case amount
        case trans
        case createdBy
        case totalTrans
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        authId = container.decodeIfPresent(.authId)
        userId = container.decodeIfPresent(.userId)
        qrType = container.decodeIfPresent(.qrType)
        additionalInfo = container.decodeIfPresent(.additionalInfo)
        productName = container.decodeIfPresent(.productName)
        subProductName = container.decodeIfPresent(.subProductName)
        productCode = container.decodeIfPresent(.productCode)
        subProductCode = container.decodeIfPresent(.subProductCode)
        amount = container.decodeIfPresent(.amount)
        trans = container.decodeIfPresent(.trans)
        createdBy = container.decodeIfPresent(.createdBy)
        totalTrans = container.decodeIfPresent(.totalTrans)
       
    }
    
}

extension CustomQrCodeDataDto: Emptyable {
    public static var empty: CustomQrCodeDataDto {
        return .init(authId: nil, userId: nil, qrType: nil, additionalInfo: nil, productName: nil, subProductName: nil, productCode: nil, subProductCode: nil, amount: nil, trans: nil, createdBy: nil, totalTrans: nil)
    }
}
