//
// CreateBulkChildTransferInquiryResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import IBCommon
import IBFoundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Data */
public struct CreateBulkChildTransferInquiryResponse: Codable, Responseable, JSONEncodable, Hashable {

    public var inquiryReson: String?
    public var inquiryDesc: String?
    public var amount: Double?
    public var ccy: String?
    public var debitAccNo: String?
    public var debitAccName: String?
    public var benBankNameShort: String?
    public var benName: String?
    public var benAccNo: String?
    public var benId: String?
    public var id: String?
    public var prodCode: String?
    public var txnType: String?
    public var status: String?
    public var effDate: String?
    public var remark: String?
    public var bulkId: String?

    public init(inquiryReson: String? = nil, inquiryDesc: String? = nil, amount: Double? = nil, ccy: String? = nil, debitAccNo: String? = nil, debitAccName: String? = nil, benBankNameShort: String? = nil, benName: String? = nil, benAccNo: String? = nil, benId: String? = nil, id: String? = nil, prodCode: String? = nil, txnType: String? = nil, status: String? = nil, effDate: String? = nil, remark: String? = nil, bulkId: String? = nil) {
        self.inquiryReson = inquiryReson
        self.inquiryDesc = inquiryDesc
        self.amount = amount
        self.ccy = ccy
        self.debitAccNo = debitAccNo
        self.debitAccName = debitAccName
        self.benBankNameShort = benBankNameShort
        self.benName = benName
        self.benAccNo = benAccNo
        self.benId = benId
        self.id = id
        self.prodCode = prodCode
        self.txnType = txnType
        self.status = status
        self.effDate = effDate
        self.remark = remark
        self.bulkId = bulkId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case inquiryReson
        case inquiryDesc
        case amount
        case ccy
        case debitAccNo
        case debitAccName
        case benBankNameShort
        case benName
        case benAccNo
        case benId
        case id
        case prodCode
        case txnType
        case status
        case effDate
        case remark
        case bulkId
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        inquiryReson = container.decodeIfPresent(.inquiryReson)
        inquiryDesc = container.decodeIfPresent(.inquiryDesc)
        amount = container.decodeIfPresent(.amount)
        ccy = container.decodeIfPresent(.ccy)
        debitAccNo = container.decodeIfPresent(.debitAccNo)
        debitAccName = container.decodeIfPresent(.debitAccName)
        benBankNameShort = container.decodeIfPresent(.benBankNameShort)
        benName = container.decodeIfPresent(.benName)
        benAccNo = container.decodeIfPresent(.benAccNo)
        benId = container.decodeIfPresent(.benId)
        id = container.decodeIfPresent(.id)
        prodCode = container.decodeIfPresent(.prodCode)
        txnType = container.decodeIfPresent(.txnType)
        status = container.decodeIfPresent(.status)
        effDate = container.decodeIfPresent(.effDate)
        remark = container.decodeIfPresent(.remark)
        bulkId = container.decodeIfPresent(.bulkId)
       
    }
    
}

extension CreateBulkChildTransferInquiryResponse: Emptyable {
    public static var empty: CreateBulkChildTransferInquiryResponse {
        return .init(inquiryReson: nil, inquiryDesc: nil, amount: nil, ccy: nil, debitAccNo: nil, debitAccName: nil, benBankNameShort: nil, benName: nil, benAccNo: nil, benId: nil, id: nil, prodCode: nil, txnType: nil, status: nil, effDate: nil, remark: nil, bulkId: nil)
    }
}
