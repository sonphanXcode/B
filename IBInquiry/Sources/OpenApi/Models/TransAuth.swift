//
// TransAuth.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import IBCommon
import IBFoundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TransAuth: Codable, Responseable, JSONEncodable, Hashable {

    public var authType: String?
    public var expTime: Int64?
    public var isSameDevice: String?
    public var qrData: String?
    public var authId: String?
    public var dataSign: String?
    public var additionalInfo: CustomQrCodeDataDto?

    public init(authType: String? = nil, expTime: Int64? = nil, isSameDevice: String? = nil, qrData: String? = nil, authId: String? = nil, dataSign: String? = nil, additionalInfo: CustomQrCodeDataDto? = nil) {
        self.authType = authType
        self.expTime = expTime
        self.isSameDevice = isSameDevice
        self.qrData = qrData
        self.authId = authId
        self.dataSign = dataSign
        self.additionalInfo = additionalInfo
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case authType
        case expTime
        case isSameDevice
        case qrData
        case authId
        case dataSign
        case additionalInfo
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        authType = container.decodeIfPresent(.authType)
        expTime = container.decodeIfPresent(.expTime)
        isSameDevice = container.decodeIfPresent(.isSameDevice)
        qrData = container.decodeIfPresent(.qrData)
        authId = container.decodeIfPresent(.authId)
        dataSign = container.decodeIfPresent(.dataSign)
        additionalInfo = container.decodeIfPresent(.additionalInfo)
       
    }
    
}

extension TransAuth: Emptyable {
    public static var empty: TransAuth {
        return .init(authType: nil, expTime: nil, isSameDevice: nil, qrData: nil, authId: nil, dataSign: nil, additionalInfo: nil)
    }
}
